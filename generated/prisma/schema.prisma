model Appointment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int

  service   Service @relation(fields: [serviceId], references: [id])
  serviceId Int

  slot   BookableSlot @relation(fields: [slotId], references: [id])
  slotId Int

  status Status
}

enum Status {
  UPCOMING
  ATTENDED
  MISSED
  // When canceling, the appointment can return to the availability group or remain blocked here
  CANCELLED
}

model Business {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  contactNumber String
  businessName  String

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int          @unique

  services Service[]
}

// Model connected to Auth0
model BusinessCustomer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  mobile    String?  @unique
  firstName String
  lastName  String

  organization OrganizationOnBusinessCustomer?
}

// Customer does not authenticate
model Customer {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  email        String        @unique
  mobile       String?       @unique
  firstName    String?
  lastName     String?
  appointments Appointment[]
}

model Organization {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  legalName           String
  firstLineOfAddress  String
  secondLineOfAddress String?
  city                String
  postCode            String

  stripeCustomerId String?

  businessCustomers OrganizationOnBusinessCustomer?

  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId Int          @unique

  Business Business[]
}

model OrganizationOnBusinessCustomer {
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int          @unique

  businessCustomer   BusinessCustomer @relation(fields: [businessCustomerId], references: [id])
  businessCustomerId Int              @unique

  role OrganizationRole

  @@id([organizationId, businessCustomerId])
}

model Subscription {
  id                   Int                @id @default(autoincrement())
  createdAt            DateTime           @default(now())
  level                SubscriptionLevel
  price                Decimal            @db.Decimal(10, 2)
  status               SubscriptionStatus @default(TRIAL)
  stripeCustomerId     String?
  stripeSubscriptionId String?
  trialEndsAt          DateTime?
  paymentFrequency     PaymentFrequency

  organization Organization?
}

enum PaymentFrequency {
  MONTHLY
  ANNUALY
}

enum SubscriptionLevel {
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum SubscriptionStatus {
  TRIAL // Free trial period
  ACTIVE // Paid and active
  PAST_DUE // Payment failed
  CANCELED // Subscription canceled
  UNPAID // Payment required
}

// The further down you go the more restricted the role is
enum OrganizationRole {
  // Only the owner manages billing, has access to remove the business and manage subscriptions
  OWNER
  // Can change business names, images, services and information, change pricing
  ADMIN
  // Can amend other staffs appointments, cancel appointments, issue refunds etc.
  MANAGER
  // Can manage their own appointments, cancel their own appointments
  STAFF
}

// How does a service work
// 1. Availability group and underlying models dictate how bookable slots are generated daily/weekly/monthly

// A service that can be booked by a customer
model Service {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  active Boolean @default(true)

  Business   Business? @relation(fields: [businessId], references: [id])
  businessId Int?

  appointments        Appointment[]
  availibilityGroup   AvailabilityGroup @relation(fields: [availibilityGroupId], references: [id])
  availibilityGroupId Int
}

// Availability group which can be referenced by many services
model AvailabilityGroup {
  id                Int                 @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  dailyAvailability DailyAvailability[]
  services          Service[]
  BookableSlot      BookableSlot[]
}

// Defines how time slots are generated for a day in a week
model DailyAvailability {
  id                  Int               @id @default(autoincrement())
  availabilityGroup   AvailabilityGroup @relation(fields: [availabilityGroupId], references: [id])
  availabilityGroupId Int
  availabilityBlocks  TimeBlock[]
  dayOfWeek           WeekDay

  @@unique([availabilityGroupId, dayOfWeek])
}

// Time block for daily availability
model TimeBlock {
  id                     Int               @id @default(autoincrement())
  dailyAvailabilityDay   DailyAvailability @relation(fields: [dailyAvailabilityDayId], references: [id])
  dailyAvailabilityDayId Int

  startTime String // e.g. "09:00"
  endTime   String // e.g. "12:00"
}

// A generate bookable slot which is claimed by appointment
model BookableSlot {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startTime DateTime
  endTime   DateTime

  Appointment Appointment[]

  AvailabilityGroup   AvailabilityGroup? @relation(fields: [availabilityGroupId], references: [id])
  availabilityGroupId Int?
}

enum WeekDay {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}
